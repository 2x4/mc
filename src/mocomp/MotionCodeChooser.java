/*
 * MotionCodeChooser.java
 *
 * Created on 2009/01/19, 0:20:45
 * Revised:   2015/09/10
 */
package mocomp;

import static mocomp.MotionCompApp.mp7mgr;
import static mocomp.MotionCompApp.getResourceString;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author yukawa
 */
public class MotionCodeChooser extends javax.swing.JDialog {
  private boolean cancelSelected = false;// OKとキャンセルのどちらのボタンが押されたのかを示す
  private int partIndex = 0; // どの部位の舞踊符を表示するのか

//  private String selectedShow;              // 選択中の一連の動作（芸能、形）
  private Node selectedMotion = null;       // 選択中の振り
//  private ArrayList<String> currentTitles = null; // 表示中のタイトル(動作名)の一覧
  private ArrayList<Node> currentSegments = null;

    /** Creates new form MotionCodeChooser */
     @SuppressWarnings("unchecked")
    public MotionCodeChooser() {
      initComponents();

      jLabel1.setText(getResourceString("genreLabel")+":");
      jLabel2.setText(getResourceString("partLabel")+":");
      jLabel4.setText(getResourceString("titleLabel") + ":");
      jLabel5.setText(getResourceString("segmentnameLabel") + ":");
      jLabel8.setText(getResourceString("durationLabel") + ":");
      showList.setModel(new DefaultListModel());
      motionList.setModel(new DefaultListModel());
//      if (resources == null) { // 単独でも動作するように
//        resources = MotionComp.getResources();
//      }      
      jLabel3.setText(mp7mgr.getUri());
      initGenreChoice();
      partName.setText(mp7mgr.getPartName(partIndex));
  }
    
   @SuppressWarnings("unchecked")
  private void initGenreChoice() {
    ArrayList<String> genres = mp7mgr.getGenres(); // 定義されているすべてのカテゴリ
    for (String g : genres) {
      System.out.println(g);
      genreChoice.addItem(makeObj(g));
    }
    genreChoice.setSelectedIndex(0);
  }
  private Object makeObj(final String item) {
    return new Object() {
      @Override
      public String toString() {
        return item;
      }
    };
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    genreChoice = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    partName = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    showList = new javax.swing.JList();
    jLabel5 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    motionList = new javax.swing.JList();
    jLabel8 = new javax.swing.JLabel();
    motionTime = new javax.swing.JLabel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    motionDesc = new javax.swing.JTextArea();
    jLabel3 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setModal(true);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jLabel1.setText("Genre:");

    genreChoice.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        genreChoiceItemStateChanged(evt);
      }
    });

    jLabel2.setText("Part Name:");

    partName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel4.setText("Title:");

    jScrollPane1.setPreferredSize(new java.awt.Dimension(260, 120));

    showList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        showListValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(showList);

    jLabel5.setText("Segment Name:");

    jScrollPane2.setPreferredSize(new java.awt.Dimension(260, 120));

    motionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        motionListValueChanged(evt);
      }
    });
    jScrollPane2.setViewportView(motionList);

    jLabel8.setText("Time:");

    motionTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    motionDesc.setColumns(20);
    motionDesc.setEditable(false);
    motionDesc.setLineWrap(true);
    motionDesc.setRows(5);
    motionDesc.setWrapStyleWord(true);
    motionDesc.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel3.setForeground(new java.awt.Color(51, 51, 51));
    jLabel3.setText("jLabel3");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
            .addGap(12, 12, 12)
            .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cancelButton))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(motionTime, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(motionDesc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel4)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genreChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partName, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
              .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel1)
            .addComponent(jLabel2)
            .addComponent(genreChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(partName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel4)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel8)
          .addComponent(motionTime, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(motionDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(okButton)
              .addComponent(cancelButton)))
          .addGroup(layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
      cancelSelected = false;
      dispose();
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
      cancelSelected = true;
      dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    @SuppressWarnings("unchecked")
    private void showListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_showListValueChanged
      if (evt == null || evt.getValueIsAdjusting()) {
//        selectedShow = currentTitles.get(showList.getSelectedIndex());
        ((DefaultListModel) motionList.getModel()).clear();
        // partIndexで使うことができる振り(motion)の一覧を得る
        currentSegments = mp7mgr.getSegments(genreChoice.getSelectedIndex(), showList.getSelectedIndex(), partIndex);
        currentSegments.stream().forEach((segment) -> {
          ((DefaultListModel) motionList.getModel()).addElement(mp7mgr.getSegmentTitle(segment));
        });
        selectedMotion = currentSegments.get(0);
        motionList.setSelectedIndex(0);
        motionListValueChanged(null);
      }
    }//GEN-LAST:event_showListValueChanged
   @SuppressWarnings("unchecked")
    private void genreChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_genreChoiceItemStateChanged
      ((DefaultListModel) showList.getModel()).clear();
      ArrayList<String> shownames = mp7mgr.getShowNames(genreChoice.getSelectedIndex());
//      selectedShow = shownames.get(0);
      shownames.stream().forEach((String showname) -> {
        DefaultListModel<String> dlm = (DefaultListModel<String>) showList.getModel();
        dlm.addElement(showname);
    });
      showList.setSelectedIndex(0);

//      currentTitles = mp7mgr.getShowNames(genreChoice.getSelectedIndex());
//      System.out.println("reload titles=" + currentTitles.toString());
      showListValueChanged(null);  //      motionList.valueChanged(null);
    }//GEN-LAST:event_genreChoiceItemStateChanged

    // Segment Name:  の選択に変化があった
    private void motionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_motionListValueChanged
      if (evt == null || evt.getValueIsAdjusting()) {
        selectedMotion = currentSegments.get(motionList.getSelectedIndex());
        motionTime.setText(String.format("%1.1f", mp7mgr.getTime(selectedMotion)) +
                getResourceString("durationUnitLabel") +
                " (" + mp7mgr.getDuration(selectedMotion) +
                getResourceString("framelengthLabel") + ")");
        motionDesc.setText(mp7mgr.getDescription(selectedMotion));
      }
    }//GEN-LAST:event_motionListValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      cancelSelected = true;
      dispose();
    }//GEN-LAST:event_formWindowClosing

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JComboBox genreChoice;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextArea motionDesc;
  private javax.swing.JList motionList;
  private javax.swing.JLabel motionTime;
  private javax.swing.JButton okButton;
  private javax.swing.JLabel partName;
  private javax.swing.JList showList;
  // End of variables declaration//GEN-END:variables

  // 選択されているモーションコードを返す
  // @return 選択されているモーションコード
  public final String getSelectedMotionCode() {
    if (selectedMotion == null) {
      selectedMotion = mp7mgr.getSegment(0, 0, 0, 0);
    }
    return ((Element) selectedMotion).getAttribute("id");
  }

  // このダイアログがどの部位を表示するためのものか設定する
  // ScorePanelによりこのダイアログが表示(show)される前に呼ばれなくてはならない
  // @param partIndex 部位のインデックス
  public final void setPart(int partIndex) {
    if (this.partIndex != partIndex) {
      this.partIndex = partIndex;
      partName.setText(mp7mgr.getPartName(partIndex));
  //    showListValueChanged(null);
    }
  }

  // 動作コード選択パネルでOKが押されたかを返す
  // @return  動作コード選択パネルでOKが押されたらtrue，キャンセルされたらfalse
  public final boolean isSelected() {
    return !cancelSelected;
  }
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new MotionCodeChooser().setVisible(true);
      }
    });
  }
}
